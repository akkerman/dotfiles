"
" vim: set fdm=marker fcs=fold\:\ :
"
" vundle {{{
set nocompatible              " be iMproved, required for vundle
set noesckeys
filetype off                  " required for vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin() " {{{2
" let Vundle manage Vundle, required for vundle
Plugin 'VundleVim/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'altercation/vim-colors-solarized'
Plugin 'cocopon/iceberg.vim'

Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-fugitive'      " for git commands and branch in statusbar
Plugin 'tpope/vim-commentary'    " gc adds comments
Plugin 'tpope/vim-surround'      " ys,cs,ds - add,change,del surround
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-dispatch'

Plugin 'w0rp/ale'                " syntax check

Plugin 'edkolev/tmuxline.vim'    " for tmux status line
Plugin 'tmux-plugins/vim-tmux'   " syntax + more (shift+K for help e.g.)

Plugin 'ternjs/tern_for_vim'     " code-analysis engine for JavaScript
Plugin 'Valloric/YouCompleteMe'  " code-completion engine for Vim


Plugin 'kchmck/vim-coffee-script'
Plugin 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}

Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'

Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

Plugin 'christoomey/vim-tmux-navigator'
Plugin 'christoomey/vim-tmux-runner'

Plugin 'akkerman/vim-jasmine'
Plugin 'ssh://git@192.168.0.8:2222/akkerman/vim-javascript-jasmine.git'

" Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'moll/vim-node'

" Plugin 'bigfish/vim-js-context-coloring'
Plugin 'mboughaba/i3config.vim'
Plugin 'godlygeek/tabular'

" Plugin 'lukerandall/haskellmode-vim'

Plugin 'chr4/nginx.vim'

Plugin 'majutsushi/tagbar'

Plugin 'mileszs/ack.vim' " ack-grep

Plugin 'digitaltoad/vim-pug'

Plugin 'tmhedberg/SimpylFold' " Python folding
Plugin 'jmcantrell/vim-virtualenv'

" All of your Plugins must be added before the following line
call vundle#end()             " required for vundle }}}2

filetype plugin indent on     " required for vundle

" }}}
" various {{{

set history=200    " open with q:
set nowrap         " do NOT wrap long lines
set hidden         " when buffer modified and not in a window
set autowrite      " just write file to disk in a lot of cases
set hlsearch       " highlight matching searches
set incsearch      " show first match while typing search
" tabs
set tabstop=4      " show existing tabs as 4 spaces
set shiftwidth=4   " indent 4 spaces with '>'
set expandtab      " insert 4 spaces when pressing tab
" hybrid linenumbers
set relativenumber
set number
" splits
set splitbelow
set splitright
" tweaks for browsing
let g:netrw_banner = 1
let g:netrw_list_hide = netrw_gitignore#Hide()
let g:netrw_liststyle = 3 " treeview
" finding files # https://www.youtube.com/watch?v=XA2WjJbmmoM
set path+=**
set wildmenu
set wildmode=full
" visualize invisible characters
set list
set listchars=tab:>-
" visualize max length 
let &colorcolumn="80,".join(range(100,999),",")

" }}}
" look and feel {{{

" colors
syntax enable
set background=dark
silent! colorscheme solarized

" airline symbols
let g:airline_powerline_fonts = 1
let g:airline#extensions#taboo#enabled = 1
let g:airline#extensions#ale#enabled = 1
" let g:ale_sign_column_always = 1
let g:ale_sign_error = 'ÔÅñ'
let g:ale_sign_warning = 'ÔÅ±'

" statusline (vim-airline)
set laststatus=2   " always on
let g:airline#extensions#tabline#enabled = 1

set mouse=a

"}}}
" plugin related settings {{{

let g:ale_linters = { 'javascript': ['eslint']}
nmap <silent> <F2> <Plug>(ale_next_wrap)
nmap <silent> <F3> <Plug>(ale_previous_wrap)

let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

" context coloring (default off)
let g:js_context_colors_enabled = 0

" snippets
let g:UltiSnipsExpandTrigger="<c-j>"

" vim-markdown
let g:markdown_fenced_languages = ["java","sh", "javascript", "html", "abap", "haskell"]

" haskellmode-vim
let g:haddock_browser="/usr/bin/google-chrome"
au BufEnter *.hs compiler ghc

" NERDTree Tagbar
nmap <leader>f :NERDTreeFind<CR>
nmap <F7> :NERDTreeToggle<CR>
nmap <F8> :TagbarToggle<CR>

" Tern
let g:tern_map_keys=1

"}}}
" automate stuff {{{

augroup newfile
    autocmd!
    autocmd BufNewFile Dockerfile    0r ~/.vim/template/Dockerfile
    autocmd BufNewFile Vagrantfile   0r ~/.vim/template/Vagrantfile
    autocmd BufNewFile *.html        0r ~/.vim/template/html
    autocmd BufNewFile .tern-project 0r ~/.vim/template/tern-project
    autocmd BufNewFile docker-compose*.yml 0r ~/.vim/template/docker-compose.yml
augroup END

augroup my_stuff
    autocmd!
    " edit vimrc
    autocmd bufwritepost $MYVIMRC source $MYVIMRC " source vimrc after saving
    nnoremap <leader>ev :vsplit $MYVIMRC<CR>
    nnoremap <leader>sv :source $MYVIMRC<CR>

    " send to tmux
    vnoremap <leader>st :VtrSendLinesToRunner<CR>

    " Jasmine related
    autocmd BufReadPost,BufNewFile *.spec.js set filetype=javascript syntax=jasmine
augroup END


"}}}
" mappings {{{

" move blocks in visualmode
vnoremap K xkP`[V`]
vnoremap U xp`[V`]
vnoremap L >gv
vnoremap H <gv
" nnoremap <CR> o<ESC> " usesless in quickfix window...

" switch buffer by number
nnoremap <leader>l :ls<cr>:b<space>
" switch off highlightsearch
nnoremap <leader>n :nohls<cr>
" format json
nnoremap <leader>j :%!jq '.'<cr>:set ft=json<cr>

" }}}
" abbreviations {{{
iabbrev widht width
iabbrev lenght length
iabbrev heigth height

" }}}
" Jasmine spec {{{

function! SpecAlternateFile(currentfile)
    let file = expand(a:currentfile)
    if match(file, ".spec.js$") >= 0
        return substitute(file, '\v^(.+).spec.js$', '\1.js', '')
    elseif match(file, '.js$') >= 0
        return substitute(file, '\v^(.+).js$', '\1.spec.js', '')
    else
        return a:currentfile
    endif

endfunction

function! SpecSwitch(currentfile)
    let altfile = SpecAlternateFile(a:currentfile)
    if bufexists(altfile)
        execute 'buffer ' . fnameescape(altfile)
    else
        execute 'edit ' . fnameescape(altfile)
    endif
endfunction

command! Spec :call SpecSwitch('%')

" normal mode mappings for jasmine
nnoremap <leader>jx mm[{Ix`m
nnoremap <leader>jjx mm2[{Ix`m
nnoremap <leader>jf mm[{If`m
nnoremap <leader>jjf mm2[{If`m
nnoremap <leader>je mm[{^x`m
nnoremap <leader>jje mm2[{^x`m

" }}}
" http://learnvimscriptthehardway.stevelosh.com/ {{{

nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
" inoremap jk <esc>
" inoremap <esc> :echoerr 'esc disabled, use jk'

"}}}
"
"
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction


vnoremap <C-c> "+y
